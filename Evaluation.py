import joblib
import numpy as np
import pandas as pd

def predict_from_input(model):
    # Nh·∫≠p c√°c th√¥ng tin ƒë·∫ßu v√†o t·ª´ ng∆∞·ªùi d√πng
    print("Nh·∫≠p th√¥ng tin b·∫•t ƒë·ªông s·∫£n c·∫ßn d·ª± ƒëo√°n:")
    area = float(input("Di·ªán t√≠ch (m2): "))
    width = float(input("Chi·ªÅu ngang (m): "))
    length = float(input("Chi·ªÅu d√†i (m): "))
    street_width = float(input("ƒê∆∞·ªùng tr∆∞·ªõc nh√† (m): "))
    floors = int(input("S·ªë l·∫ßu: "))
    bedrooms = int(input("S·ªë ph√≤ng ng·ªß: "))

    # Nh·∫≠p c√°c th√¥ng tin nh·ªã ph√¢n
    dining = input("C√≥ ph√≤ng ƒÉn? (y/n): ").lower() == 'y'
    kitchen = input("C√≥ nh√† b·∫øp? (y/n): ").lower() == 'y'
    terrace = input("C√≥ s√¢n th∆∞·ª£ng? (y/n): ").lower() == 'y'
    car_park = input("C√≥ ch·ªó ƒë·ªÉ xe h∆°i? (y/n): ").lower() == 'y'
    owner = input("Ch√≠nh ch·ªß? (y/n): ").lower() == 'y'

    # Nh·∫≠p th√¥ng tin ph√¢n lo·∫°i
    street = input("T√™n ƒë∆∞·ªùng: ")
    ward = input("Ph∆∞·ªùng: ")
    district = input("Qu·∫≠n: ")
    city = input("Th√†nh ph·ªë: ")
    property_type = input("Lo·∫°i BDS: ")
    direction = input("H∆∞·ªõng: ")

    # T·∫°o DataFrame ch·ª©a d·ªØ li·ªáu nh·∫≠p v√†o
    new_data = pd.DataFrame([{
        'Di·ªán t√≠ch': area,
        'Chi·ªÅu ngang': width,
        'Chi·ªÅu d√†i': length,
        'ƒê∆∞·ªùng tr∆∞·ªõc nh√†': street_width,
        'S·ªë l·∫ßu': floors,
        'S·ªë ph√≤ng ng·ªß': bedrooms,
        'Ph√≤ng ƒÉn': int(dining),
        'Nh√† b·∫øp': int(kitchen),
        'S√¢n th∆∞·ª£ng': int(terrace),
        'Ch·ªó ƒë·ªÉ xe h∆°i': int(car_park),
        'Ch√≠nh ch·ªß': int(owner),
        'ƒê∆∞·ªùng': street,
        'Ph∆∞·ªùng': ward,
        'Qu·∫≠n': district,
        'Th√†nh ph·ªë': city,
        'Lo·∫°i BDS': property_type,
        'H∆∞·ªõng': direction
    }])

    # D·ª± ƒëo√°n
    log_price = model.predict(new_data)[0]
    price = np.expm1(log_price)

    print(f"üí∞ Gi√° b·∫•t ƒë·ªông s·∫£n d·ª± ƒëo√°n: kho·∫£ng {price:.2f} t·ª∑ ƒë·ªìng")


loaded_model = joblib.load('F:/3.5 Years/First Year/Python/Mini_Linear/trained_rf_model.pkl')

# G·ªçi h√†m d·ª± ƒëo√°n t·ª´ input ng∆∞·ªùi d√πng
predict_from_input(loaded_model)